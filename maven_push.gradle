apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

group = PROJ_GROUP

// Both the artifactory and bintray plugins depend on this singular
// global `version` variable. As such, we need to configure it based
// on which task we're running.
//
// The solution here is brittle; it just checks whether 'bintrayUpload'
// was called for execution, otherwise it assumes SNAPSHOT. If we
// were to wait until the task graph was built, we'd be too late
// (the plugins would already have used `version`).
version = PROJ_VERSION

// Create source/javadoc artifacts for publishing
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    // Exclude generated files
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    source = android.sourceSets.main.java.srcDirs
    failOnError false
    classpath += configurations.compile
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

javadoc {
    options {
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
        links "http://docs.oracle.com/javase/7/docs/api"
        title PROJ_NAME
    }
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

// Configure android-maven-gradle-plugin
install {
    repositories.mavenInstaller.pom.project {
        name PROJ_NAME
        description PROJ_DESCRIPTION
        packaging 'aar'
        url PROJ_WEBSITEURL

        licenses {
            license {
                name POM_LICENCE_NAME
                url POM_LICENCE_URL
                distribution POM_LICENCE_DIST
            }
        }

        scm {
            url POM_SCM_URL
            connection POM_SCM_CONNECTION
            developerConnection POM_SCM_DEV_CONNECTION

        }

        developers {
            developer {
                id DEVELOPER_ID
                name DEVELOPER_NAME
                email DEVELOPER_EMAIL
            }
        }
    }
}

// Configure gradle-bintray-plugin (for publishing releases)
bintray {
    configurations = ['archives']
    publications = ['mavenJava']
	override = true

    pkg {
        repo = 'maven'
        name = PROJ_NAME
        description = PROJ_DESCRIPTION
		publish = true
		publicDownloadNumbers = true
        vcsUrl = PROJ_VCSURL
        licenses = ['Apache-2.0']
        version {
            name = PROJ_VERSION
            desc = PROJ_DESCRIPTION
            released = new Date()
            vcsTag = PROJ_VERSION
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
		    pom {
                packaging 'aar'
            }
            pom.withXml {
			    def dependenciesNode = asNode().appendNode('dependencies')
                 // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                 configurations.implementation.allDependencies.each {
                     // Ensure dependencies such as fileTree are not included.
                     if (it.name != 'unspecified') {
                         def dependencyNode = dependenciesNode.appendNode('dependency')
                         dependencyNode.appendNode('groupId', it.group)
                         dependencyNode.appendNode('artifactId', it.name)
                         dependencyNode.appendNode('version', it.version)
						 
						if (it.group.contains("junit") || it.group.contains("com.android.support.test")) {
                            dependencyNode.appendNode('scope', 'test')
                        } else if (it.group.contains("com.android.support") || it.group.contains("androidx.")) {
                            dependencyNode.appendNode('scope', 'runtime')
                        } else {
                            dependencyNode.appendNode('scope', 'compile')
                        }
//                        if (it instanceof ModuleDependency) {
//                            dependencyNode.appendNode('scope', 'runtime')
//                        }
                     }
                 }
             }
        }
    }
}


task checkBintrayUserAndKey {
    def user = null
    def key = null
    Properties properties = new Properties()

    def file = project.rootProject.file('local.properties')
    if (file.exists()) {
        properties.load(file.newDataInputStream())
        user = properties.getProperty('BINTRAY_USER')
        key = properties.getProperty('BINTRAY_KEY')
    }

    if (user == null || key == null) {
        user = System.getenv("BINTRAY_USER")
        key = System.getenv("BINTRAY_KEY")
    }


    if (user == null || key == null) {
        System.out.println("[Message] bintrayUpload: BINTRAY_USER or BINTRAY_KEY is null!")
    }

    bintray.user = user
    bintray.key = key
}

tasks.bintrayUpload.dependsOn(checkBintrayUserAndKey)